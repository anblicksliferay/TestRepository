/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.astra.anblicks.pdca.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.astra.anblicks.pdca.model.company_user;
import com.astra.anblicks.pdca.model.company_userModel;
import com.astra.anblicks.pdca.model.company_userSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the company_user service. Represents a row in the &quot;pdca_company_user&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link company_userModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link company_userImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see company_userImpl
 * @see company_user
 * @see company_userModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class company_userModelImpl extends BaseModelImpl<company_user>
	implements company_userModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a company_user model instance should use the {@link company_user} interface instead.
	 */
	public static final String TABLE_NAME = "pdca_company_user";
	public static final Object[][] TABLE_COLUMNS = {
			{ "company_user_Id", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "Pdca_userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("company_user_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Pdca_userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table pdca_company_user (company_user_Id LONG not null primary key,companyId LONG,Pdca_userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table pdca_company_user";
	public static final String ORDER_BY_JPQL = " ORDER BY company_user.company_user_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY pdca_company_user.company_user_Id ASC";
	public static final String DATA_SOURCE = "pdcaSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.astra.anblicks.pdca.model.company_user"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.astra.anblicks.pdca.model.company_user"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.astra.anblicks.pdca.model.company_user"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long COMPANY_USER_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static company_user toModel(company_userSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		company_user model = new company_userImpl();

		model.setCompany_user_Id(soapModel.getCompany_user_Id());
		model.setCompanyId(soapModel.getCompanyId());
		model.setPdca_userId(soapModel.getPdca_userId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<company_user> toModels(company_userSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<company_user> models = new ArrayList<company_user>(soapModels.length);

		for (company_userSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"lock.expiration.time.com.astra.anblicks.pdca.model.company_user"));

	public company_userModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _company_user_Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompany_user_Id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _company_user_Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return company_user.class;
	}

	@Override
	public String getModelClassName() {
		return company_user.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("company_user_Id", getCompany_user_Id());
		attributes.put("companyId", getCompanyId());
		attributes.put("Pdca_userId", getPdca_userId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long company_user_Id = (Long)attributes.get("company_user_Id");

		if (company_user_Id != null) {
			setCompany_user_Id(company_user_Id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long Pdca_userId = (Long)attributes.get("Pdca_userId");

		if (Pdca_userId != null) {
			setPdca_userId(Pdca_userId);
		}
	}

	@JSON
	@Override
	public long getCompany_user_Id() {
		return _company_user_Id;
	}

	@Override
	public void setCompany_user_Id(long company_user_Id) {
		_company_user_Id = company_user_Id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getPdca_userId() {
		return _Pdca_userId;
	}

	@Override
	public void setPdca_userId(long Pdca_userId) {
		_Pdca_userId = Pdca_userId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			company_user.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public company_user toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (company_user)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		company_userImpl company_userImpl = new company_userImpl();

		company_userImpl.setCompany_user_Id(getCompany_user_Id());
		company_userImpl.setCompanyId(getCompanyId());
		company_userImpl.setPdca_userId(getPdca_userId());

		company_userImpl.resetOriginalValues();

		return company_userImpl;
	}

	@Override
	public int compareTo(company_user company_user) {
		long primaryKey = company_user.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof company_user)) {
			return false;
		}

		company_user company_user = (company_user)obj;

		long primaryKey = company_user.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		company_userModelImpl company_userModelImpl = this;

		company_userModelImpl._originalCompanyId = company_userModelImpl._companyId;

		company_userModelImpl._setOriginalCompanyId = false;

		company_userModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<company_user> toCacheModel() {
		company_userCacheModel company_userCacheModel = new company_userCacheModel();

		company_userCacheModel.company_user_Id = getCompany_user_Id();

		company_userCacheModel.companyId = getCompanyId();

		company_userCacheModel.Pdca_userId = getPdca_userId();

		return company_userCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{company_user_Id=");
		sb.append(getCompany_user_Id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", Pdca_userId=");
		sb.append(getPdca_userId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.astra.anblicks.pdca.model.company_user");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>company_user_Id</column-name><column-value><![CDATA[");
		sb.append(getCompany_user_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Pdca_userId</column-name><column-value><![CDATA[");
		sb.append(getPdca_userId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = company_user.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			company_user.class
		};
	private long _company_user_Id;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _Pdca_userId;
	private long _columnBitmask;
	private company_user _escapedModel;
}