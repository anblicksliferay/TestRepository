/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.astra.anblicks.pdca.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.astra.anblicks.pdca.model.MOMPointdiscussoin;
import com.astra.anblicks.pdca.model.MOMPointdiscussoinModel;
import com.astra.anblicks.pdca.model.MOMPointdiscussoinSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MOMPointdiscussoin service. Represents a row in the &quot;pdca_mompointdiscussoin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MOMPointdiscussoinModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MOMPointdiscussoinImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MOMPointdiscussoinImpl
 * @see MOMPointdiscussoin
 * @see MOMPointdiscussoinModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MOMPointdiscussoinModelImpl extends BaseModelImpl<MOMPointdiscussoin>
	implements MOMPointdiscussoinModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mom pointdiscussoin model instance should use the {@link MOMPointdiscussoin} interface instead.
	 */
	public static final String TABLE_NAME = "pdca_mompointdiscussoin";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PdId", Types.BIGINT },
			{ "MOMpdId", Types.BIGINT },
			{ "PonintDiscussionName", Types.VARCHAR },
			{ "Notes", Types.VARCHAR },
			{ "SiteId", Types.BIGINT },
			{ "CreateDate", Types.TIMESTAMP },
			{ "CreatedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PdId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MOMpdId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PonintDiscussionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Notes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SiteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CreateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CreatedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ModifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ModifiedBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table pdca_mompointdiscussoin (PdId LONG not null primary key,MOMpdId LONG,PonintDiscussionName VARCHAR(75) null,Notes VARCHAR(75) null,SiteId LONG,CreateDate DATE null,CreatedBy VARCHAR(75) null,ModifiedDate DATE null,ModifiedBy VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table pdca_mompointdiscussoin";
	public static final String ORDER_BY_JPQL = " ORDER BY momPointdiscussoin.PdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY pdca_mompointdiscussoin.PdId ASC";
	public static final String DATA_SOURCE = "pdcaSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.astra.anblicks.pdca.model.MOMPointdiscussoin"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.astra.anblicks.pdca.model.MOMPointdiscussoin"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MOMPointdiscussoin toModel(MOMPointdiscussoinSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MOMPointdiscussoin model = new MOMPointdiscussoinImpl();

		model.setPdId(soapModel.getPdId());
		model.setMOMpdId(soapModel.getMOMpdId());
		model.setPonintDiscussionName(soapModel.getPonintDiscussionName());
		model.setNotes(soapModel.getNotes());
		model.setSiteId(soapModel.getSiteId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MOMPointdiscussoin> toModels(
		MOMPointdiscussoinSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MOMPointdiscussoin> models = new ArrayList<MOMPointdiscussoin>(soapModels.length);

		for (MOMPointdiscussoinSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.astra.anblicks.pdca.service.util.ServiceProps.get(
				"lock.expiration.time.com.astra.anblicks.pdca.model.MOMPointdiscussoin"));

	public MOMPointdiscussoinModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MOMPointdiscussoin.class;
	}

	@Override
	public String getModelClassName() {
		return MOMPointdiscussoin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PdId", getPdId());
		attributes.put("MOMpdId", getMOMpdId());
		attributes.put("PonintDiscussionName", getPonintDiscussionName());
		attributes.put("Notes", getNotes());
		attributes.put("SiteId", getSiteId());
		attributes.put("CreateDate", getCreateDate());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("ModifiedBy", getModifiedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PdId = (Long)attributes.get("PdId");

		if (PdId != null) {
			setPdId(PdId);
		}

		Long MOMpdId = (Long)attributes.get("MOMpdId");

		if (MOMpdId != null) {
			setMOMpdId(MOMpdId);
		}

		String PonintDiscussionName = (String)attributes.get(
				"PonintDiscussionName");

		if (PonintDiscussionName != null) {
			setPonintDiscussionName(PonintDiscussionName);
		}

		String Notes = (String)attributes.get("Notes");

		if (Notes != null) {
			setNotes(Notes);
		}

		Long SiteId = (Long)attributes.get("SiteId");

		if (SiteId != null) {
			setSiteId(SiteId);
		}

		Date CreateDate = (Date)attributes.get("CreateDate");

		if (CreateDate != null) {
			setCreateDate(CreateDate);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}
	}

	@JSON
	@Override
	public long getPdId() {
		return _PdId;
	}

	@Override
	public void setPdId(long PdId) {
		_PdId = PdId;
	}

	@JSON
	@Override
	public long getMOMpdId() {
		return _MOMpdId;
	}

	@Override
	public void setMOMpdId(long MOMpdId) {
		_MOMpdId = MOMpdId;
	}

	@JSON
	@Override
	public String getPonintDiscussionName() {
		if (_PonintDiscussionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _PonintDiscussionName;
		}
	}

	@Override
	public void setPonintDiscussionName(String PonintDiscussionName) {
		_PonintDiscussionName = PonintDiscussionName;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_Notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _Notes;
		}
	}

	@Override
	public void setNotes(String Notes) {
		_Notes = Notes;
	}

	@JSON
	@Override
	public long getSiteId() {
		return _SiteId;
	}

	@Override
	public void setSiteId(long SiteId) {
		_SiteId = SiteId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _CreateDate;
	}

	@Override
	public void setCreateDate(Date CreateDate) {
		_CreateDate = CreateDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MOMPointdiscussoin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MOMPointdiscussoin toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MOMPointdiscussoin)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MOMPointdiscussoinImpl momPointdiscussoinImpl = new MOMPointdiscussoinImpl();

		momPointdiscussoinImpl.setPdId(getPdId());
		momPointdiscussoinImpl.setMOMpdId(getMOMpdId());
		momPointdiscussoinImpl.setPonintDiscussionName(getPonintDiscussionName());
		momPointdiscussoinImpl.setNotes(getNotes());
		momPointdiscussoinImpl.setSiteId(getSiteId());
		momPointdiscussoinImpl.setCreateDate(getCreateDate());
		momPointdiscussoinImpl.setCreatedBy(getCreatedBy());
		momPointdiscussoinImpl.setModifiedDate(getModifiedDate());
		momPointdiscussoinImpl.setModifiedBy(getModifiedBy());

		momPointdiscussoinImpl.resetOriginalValues();

		return momPointdiscussoinImpl;
	}

	@Override
	public int compareTo(MOMPointdiscussoin momPointdiscussoin) {
		long primaryKey = momPointdiscussoin.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MOMPointdiscussoin)) {
			return false;
		}

		MOMPointdiscussoin momPointdiscussoin = (MOMPointdiscussoin)obj;

		long primaryKey = momPointdiscussoin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MOMPointdiscussoin> toCacheModel() {
		MOMPointdiscussoinCacheModel momPointdiscussoinCacheModel = new MOMPointdiscussoinCacheModel();

		momPointdiscussoinCacheModel.PdId = getPdId();

		momPointdiscussoinCacheModel.MOMpdId = getMOMpdId();

		momPointdiscussoinCacheModel.PonintDiscussionName = getPonintDiscussionName();

		String PonintDiscussionName = momPointdiscussoinCacheModel.PonintDiscussionName;

		if ((PonintDiscussionName != null) &&
				(PonintDiscussionName.length() == 0)) {
			momPointdiscussoinCacheModel.PonintDiscussionName = null;
		}

		momPointdiscussoinCacheModel.Notes = getNotes();

		String Notes = momPointdiscussoinCacheModel.Notes;

		if ((Notes != null) && (Notes.length() == 0)) {
			momPointdiscussoinCacheModel.Notes = null;
		}

		momPointdiscussoinCacheModel.SiteId = getSiteId();

		Date CreateDate = getCreateDate();

		if (CreateDate != null) {
			momPointdiscussoinCacheModel.CreateDate = CreateDate.getTime();
		}
		else {
			momPointdiscussoinCacheModel.CreateDate = Long.MIN_VALUE;
		}

		momPointdiscussoinCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = momPointdiscussoinCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			momPointdiscussoinCacheModel.CreatedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			momPointdiscussoinCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			momPointdiscussoinCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		momPointdiscussoinCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = momPointdiscussoinCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			momPointdiscussoinCacheModel.ModifiedBy = null;
		}

		return momPointdiscussoinCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{PdId=");
		sb.append(getPdId());
		sb.append(", MOMpdId=");
		sb.append(getMOMpdId());
		sb.append(", PonintDiscussionName=");
		sb.append(getPonintDiscussionName());
		sb.append(", Notes=");
		sb.append(getNotes());
		sb.append(", SiteId=");
		sb.append(getSiteId());
		sb.append(", CreateDate=");
		sb.append(getCreateDate());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.astra.anblicks.pdca.model.MOMPointdiscussoin");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PdId</column-name><column-value><![CDATA[");
		sb.append(getPdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MOMpdId</column-name><column-value><![CDATA[");
		sb.append(getMOMpdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PonintDiscussionName</column-name><column-value><![CDATA[");
		sb.append(getPonintDiscussionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SiteId</column-name><column-value><![CDATA[");
		sb.append(getSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreateDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MOMPointdiscussoin.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MOMPointdiscussoin.class
		};
	private long _PdId;
	private long _MOMpdId;
	private String _PonintDiscussionName;
	private String _Notes;
	private long _SiteId;
	private Date _CreateDate;
	private String _CreatedBy;
	private Date _ModifiedDate;
	private String _ModifiedBy;
	private MOMPointdiscussoin _escapedModel;
}